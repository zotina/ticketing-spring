j ai un 2 eme application sur la meme base que le spring , j utilise un framework perso pour cette application voici un exemple de l utilisation de cette framework perso :
package mg.itu.java.controller;
import framework.ModelView;
import framework.Session;
import framework.Annotation.Controller;
import framework.Annotation.Url;
import framework.Annotation.Param;
import framework.Annotation.Post;
import framework.Annotation.Valid;
import mg.itu.java.database.Connexion;
import framework.FileUpload;
import mg.itu.java.model.Utilisateur;
import org.mindrot.jbcrypt.BCrypt;

import java.sql.Connection;


@Controller
public class AuthentificationController {

    private final String ROLE = "admin";
    
    @Url("/")
    public ModelView index() {
        ModelView modelview = new ModelView("./page/user/login_utilisateur.jsp");
        return modelview;
    }

    @Url("/admin")
    public ModelView admin() {
        ModelView modelview = new ModelView("./page/admin/login_admin.jsp");
        return modelview;
    }

    @Url("/sign_up")
    public ModelView sign_up() {
        ModelView modelview = new ModelView("./page/user/sign_up_utilisateur.jsp");
        return modelview;
    }
    @Url("/logout")
    public ModelView login_out(@Param("session") Session session) {
        ModelView modelview = new ModelView("./page/user/login_utilisateur.jsp");
        session.delete("user");
        session.delete("auth");
        session.delete("panier");
        return modelview;
    }

    @Url("/process_login_user")
    @Post
    public ModelView login_user(@Param("utilisateur") Utilisateur u ,@Param("session") Session session) {
        ModelView modelview = new ModelView();
        Connection conn = new Connexion().connect_to_postgres();
        try {
            Utilisateur user = Utilisateur.authentification(u.getEmail(), u.getMdp(), conn,null);
            if(user == null ){
                modelview.setUrl("./page/user/login_utilisateur.jsp");
                modelview.add("error","invalid email or password");
            }else{
                modelview.setUrl("./page/acceuil.jsp");
                session.add("user",user);
                session.add("auth","user");
            }
        } catch (Exception e) {
            e.printStackTrace();
            modelview.setUrl("./page/user/login_utilisateur.jsp");
                modelview.add("error","erreur happend");
        }finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

        return modelview;
    }

    @Url("/process_login_admin")
    @Post
    public ModelView login_admin(@Param("utilisateur") Utilisateur u ,@Param("session") Session session) {
        ModelView modelview = new ModelView();
        Connection conn = new Connexion().connect_to_postgres();

        try {
            Utilisateur user = Utilisateur.authentification(u.getEmail(), u.getMdp(), conn,ROLE);
            if(user == null ){
                modelview.setUrl("./page/admin/login_admin.jsp");
                modelview.add("error","invalid email or password");
            }else{
                modelview.setUrl("./page/acceuil.jsp");
                session.add("user",user);
                session.add("auth","admin");
            }
        } catch (Exception e) {
            e.printStackTrace();
            modelview.setUrl("./page/admin/login_admin.jsp");
                modelview.add("error","erreur happend");
        }finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

        return modelview;
    }

    @Url("/process_sign_up")
    @Post
    public ModelView process_sign_up(@Valid @Param("utilisateur") Utilisateur u ,@Param("passport")FileUpload passeport) {
        ModelView modelview = new ModelView();
        Connection conn = new Connexion().connect_to_postgres();
        try {
            System.out.println(passeport.getPath());
            u.setPassport(passeport.getPath());
            u.setMdp(BCrypt.hashpw(u.getMdp(), BCrypt.gensalt()));  
            u.insert(conn);
            modelview.setUrl("./page/user/login_utilisateur.jsp");
        } catch (Exception e) {
            e.printStackTrace();
            modelview.setUrl("./page/user/sign_up_utilisateur.jsp");
            modelview.add("error", "Erreur lors de l'inscription");
        } finally {
            if (conn != null) try { conn.close(); } catch (Exception e) {}
        }
        return modelview;
    }
    

}

et voici comment utiliser restApi sur cette framework perso : package mg.itu.java.controller;
import framework.ModelView;
import framework.Annotation.Url;
import framework.Annotation.RestApi;
import framework.Annotation.Auth;
import framework.Annotation.Param;
import framework.Annotation.Controller;
import mg.itu.java.database.Connexion;
import mg.itu.java.model.Avion;
import mg.itu.java.model.Classe;
import mg.itu.java.model.Ville;
import mg.itu.java.model.Vol_siege;
import mg.itu.java.model.Type_siege;
import mg.itu.java.model.Vol;

import java.sql.Connection;
import java.time.LocalDateTime;
import java.util.List;

import framework.Annotation.Post;

@Controller
public class VolController {
    @Url("/vol_rest")
    @RestApi
    public ModelView listRest() {
        ModelView modelview = new ModelView();
        Connection conn = new Connexion().connect_to_postgres();
        try {
            modelview.add("volList", Vol.getAll(conn));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return modelview;
    } 
} cest cette volList qu il transformera en json ou tu peux retourner en String et builder le un json standard {sucess:true or false , data: ,response: }

maintenant cree moi un export pdf restApi sur cette application avec framework personnel , NB il ne s agit pas de spring , n utilise pas les lib sp,ecifique de spring tu pex medonner des lib jar a telechager pour le faire ou tu peux utiliser servelt si c est utile 

puis sur le view de details reservation de spring rajouter un boutton exporter puis appler cette rest pour le faire , le application avec framework perso c est sur api.baseUrl=http://localhost:8080/Ticketing/ 
puiss utilise cette model de appel de rest sur spring :

package mg.itu.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import com.fasterxml.jackson.databind.ObjectMapper;
import mg.itu.model.form.LoginRequest;
import mg.itu.model.form.LoginResponse;
@Service
public class AuthService { 

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Value("${api.base-url}")
    private String baseApiUrl;

    private final ObjectMapper objectMapper = new ObjectMapper();

    public LoginResponse login(LoginRequest loginRequest) throws Exception {
        String loginUrl = baseApiUrl.trim() + "auth.auth_api_controller.login";
        WebClient client = webClientBuilder.baseUrl(loginUrl).build();

        ResponseEntity<String> response = client.post()
            .header("Content-Type", "application/json")
            .bodyValue(loginRequest)
            .retrieve()
            .toEntity(String.class) 
            .block();

        if (response != null && response.getStatusCode().is2xxSuccessful()) {
            return objectMapper.readValue(response.getBody(), LoginResponse.class);
        }
        return null; 
    }

    public void logout(String accessToken,String sid) throws Exception {
        String logoutUrl = baseApiUrl.trim() + "auth.auth_api_controller.logout";
        WebClient client = webClientBuilder.baseUrl(logoutUrl).build();

        client.post()
            .header("Authorization", "Bearer " + accessToken)
            .cookie("sid", sid)
            .retrieve()
            .toEntity(String.class)
            .block();
    }

} mais enlever juste le token il a pas pour l utilisation de cette restAPi export 